(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{633:function(v,_,s){"use strict";s.r(_);var l=s(30),t=Object(l.a)({},(function(){var v=this,_=v.$createElement,s=v._self._c||_;return s("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[s("h2",{attrs:{id:"性能测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能测试"}},[v._v("#")]),v._v(" 性能测试")]),v._v(" "),s("h3",{attrs:{id:"为什么做性能测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么做性能测试"}},[v._v("#")]),v._v(" 为什么做性能测试？")]),v._v(" "),s("p",[v._v("通过一定的手段，在多并发下情况下，获取被测系统的各项性能指标，验证被测系统在高并发下 的处理能力、响应能力，稳定性等，能否满足预期。定位性能瓶颈，排查性能隐患，保障系统的 质量，提升用户体验。")]),v._v(" "),s("h3",{attrs:{id:"什么场景适用做性能测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么场景适用做性能测试"}},[v._v("#")]),v._v(" 什么场景适用做性能测试？")]),v._v(" "),s("div",{staticClass:"language-md line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[v._v("\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[v._v("-")]),v._v(" 用户量大，PV比较高的系统 \n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[v._v("-")]),v._v(" 系统核心模块/接口 \n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[v._v("-")]),v._v(" 业务逻辑/算法比较复杂 \n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[v._v("-")]),v._v(" 促销/活动推广计划 \n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[v._v("-")]),v._v(" 新系统，新项目\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[v._v("-")]),v._v(" 线上性能问题验证和调优\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[v._v("-")]),v._v(" 新技术选型\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[v._v("-")]),v._v(" 性能容量评估和规划\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[v._v("-")]),v._v(" 日常系统性能回归\n")])]),v._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[v._v("1")]),s("br"),s("span",{staticClass:"line-number"},[v._v("2")]),s("br"),s("span",{staticClass:"line-number"},[v._v("3")]),s("br"),s("span",{staticClass:"line-number"},[v._v("4")]),s("br"),s("span",{staticClass:"line-number"},[v._v("5")]),s("br"),s("span",{staticClass:"line-number"},[v._v("6")]),s("br"),s("span",{staticClass:"line-number"},[v._v("7")]),s("br"),s("span",{staticClass:"line-number"},[v._v("8")]),s("br"),s("span",{staticClass:"line-number"},[v._v("9")]),s("br"),s("span",{staticClass:"line-number"},[v._v("10")]),s("br")])]),s("h3",{attrs:{id:"性能调优思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能调优思路"}},[v._v("#")]),v._v(" 性能调优思路")]),v._v(" "),s("div",{staticClass:"language-md line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[v._v("整体思路：从前到后，从表象到内部\n1、首先排除压力机自身的问题，如CPU、内存，网络，脚本编写等 \n2、监控中间件的访问日志，观察响应时间，大体确定耗时处于哪一段 \n3、排查网络问题，监控压力机到后端服务器的网络，以及各服务器间的网络，是否达到网络上限 \n4、监控服务端所有机器的操作系统负载，如CPU、内存、磁盘、网络是否达到瓶颈 \n5、监控应用服务器的日志，查看是否存在ERROR日志，比如TimeOut或其他类型报错 \n6、监控各中间件的连接数，如nginx、tomcat、mysql等，是否达到上限 \n7、监控应用程序线程状态，使用jstack或jvisualvm查看是否有死锁、阻塞等情况 \n8、监控应用程序的jvm，使用jstat或者jmap查看GC情况，是否内存泄漏等 \n9、使用jprofiler监控应用程序，可以查看耗时比较长的代码方法 \n10、监控数据库，是否存在慢查询，一般数据库CPU高都是因为SQL语句效率低造成的 \n11、检查数据库执行计划，是否有全表扫描，以及索引不生效的情况 \n12、检查系统外部依赖情况，如果外部依赖系统性能差，也会造成本系统性能低 \n13、对于不好定位的问题，可以考虑采用模块隔离法来确定问题 \n")])]),v._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[v._v("1")]),s("br"),s("span",{staticClass:"line-number"},[v._v("2")]),s("br"),s("span",{staticClass:"line-number"},[v._v("3")]),s("br"),s("span",{staticClass:"line-number"},[v._v("4")]),s("br"),s("span",{staticClass:"line-number"},[v._v("5")]),s("br"),s("span",{staticClass:"line-number"},[v._v("6")]),s("br"),s("span",{staticClass:"line-number"},[v._v("7")]),s("br"),s("span",{staticClass:"line-number"},[v._v("8")]),s("br"),s("span",{staticClass:"line-number"},[v._v("9")]),s("br"),s("span",{staticClass:"line-number"},[v._v("10")]),s("br"),s("span",{staticClass:"line-number"},[v._v("11")]),s("br"),s("span",{staticClass:"line-number"},[v._v("12")]),s("br"),s("span",{staticClass:"line-number"},[v._v("13")]),s("br"),s("span",{staticClass:"line-number"},[v._v("14")]),s("br")])]),s("h3",{attrs:{id:"常见性能场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见性能场景"}},[v._v("#")]),v._v(" 常见性能场景")]),v._v(" "),s("p",[v._v("以下是性能测试中常见的一些场景：")]),v._v(" "),s("ol",[s("li",[s("p",[s("strong",[v._v("用户注册与登录")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("模拟大量新用户同时注册和已有用户登录的情况，评估系统在处理用户身份验证和创建新账户时的性能。")])])]),v._v(" "),s("li",[s("p",[s("strong",[v._v("搜索功能")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("输入不同的搜索关键词和条件，并发执行大量搜索请求，检验搜索结果的返回速度和准确性。")])])]),v._v(" "),s("li",[s("p",[s("strong",[v._v("数据上传与下载")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("例如文件上传、图片上传，以及大文件或大量数据的下载，测试传输速度和系统的稳定性。")])])]),v._v(" "),s("li",[s("p",[s("strong",[v._v("订单处理")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("包括创建订单、修改订单、取消订单等操作，特别是在促销活动期间的高并发订单处理能力。")])])]),v._v(" "),s("li",[s("p",[s("strong",[v._v("消息推送")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("向大量用户同时推送通知、消息，查看推送的及时性和成功率。")])])]),v._v(" "),s("li",[s("p",[s("strong",[v._v("报表生成")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("复杂报表的生成，测试系统在处理大量数据计算和展示时的性能。")])])]),v._v(" "),s("li",[s("p",[s("strong",[v._v("数据库操作")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("如数据插入、更新、删除和查询，特别是复杂的多表关联查询。")])])]),v._v(" "),s("li",[s("p",[s("strong",[v._v("页面加载")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("各类页面（首页、产品详情页、列表页等）的加载时间，包括页面元素的渲染和资源的获取。")])])]),v._v(" "),s("li",[s("p",[s("strong",[v._v("第三方接口调用")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("与外部系统的接口交互，检验在高并发下的响应时间和稳定性。")])])]),v._v(" "),s("li",[s("p",[s("strong",[v._v("服务器重启与恢复")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("测试系统在服务器意外重启后的恢复时间和数据完整性。")])])]),v._v(" "),s("li",[s("p",[s("strong",[v._v("高并发访问静态资源")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("如图片、CSS、JavaScript 文件等，评估系统在大量请求这些静态资源时的性能。")])])]),v._v(" "),s("li",[s("p",[s("strong",[v._v("系统备份与恢复")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("检验系统备份和恢复数据的速度和可靠性。")])])]),v._v(" "),s("li",[s("p",[s("strong",[v._v("资源竞争")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("多个业务模块同时运行，争夺系统资源（CPU、内存、网络带宽等）时的性能表现。")])])]),v._v(" "),s("li",[s("p",[s("strong",[v._v("多终端适配")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("在不同的设备（PC、平板、手机）和不同的操作系统上进行相同操作，比较性能差异。")])])]),v._v(" "),s("li",[s("p",[s("strong",[v._v("压力极限测试")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("逐步增加并发用户数和负载，直至系统达到性能瓶颈或出现故障，确定系统的最大承受能力。")])])])]),v._v(" "),s("h3",{attrs:{id:"性能测试常态化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能测试常态化"}},[v._v("#")]),v._v(" 性能测试常态化")]),v._v(" "),s("p",[v._v("性能测试常态化具有多方面的重要性：\n1、有助于提前发现并解决潜在的性能瓶颈。\n2、保障用户体验的稳定性和满意度。\n3、有利于优化资源配置。\n4、提高系统的可靠性和可用性。\n5、促进团队之间的协作与沟通。")]),v._v(" "),s("h3",{attrs:{id:"如何指定性测试计划"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何指定性测试计划"}},[v._v("#")]),v._v(" 如何指定性测试计划")]),v._v(" "),s("p",[v._v("制定一个全面的性能测试计划可以遵循以下步骤：")]),v._v(" "),s("ol",[s("li",[s("p",[v._v("明确测试目标")]),v._v(" "),s("ul",[s("li",[v._v("确定性能测试的主要目的，例如评估系统在特定负载下的响应时间、吞吐量、资源利用率等。")]),v._v(" "),s("li",[v._v("定义可接受的性能标准和阈值，例如响应时间不得超过 3 秒，系统资源使用率不能超过 80%等。")])])]),v._v(" "),s("li",[s("p",[v._v("了解系统架构和业务流程")]),v._v(" "),s("ul",[s("li",[v._v("深入研究被测试系统的架构，包括硬件、软件、网络等方面。")]),v._v(" "),s("li",[v._v("熟悉系统的业务流程和关键操作路径，确定需要重点测试的功能模块。")])])]),v._v(" "),s("li",[s("p",[v._v("确定测试范围")]),v._v(" "),s("ul",[s("li",[v._v("明确要测试的系统组件、接口和功能模块。")]),v._v(" "),s("li",[v._v("考虑包括前端页面、后端服务、数据库等整个系统的层次。")])])]),v._v(" "),s("li",[s("p",[v._v("分析用户行为和负载模型")]),v._v(" "),s("ul",[s("li",[v._v("通过用户调研、历史数据和业务预测，了解用户的操作习惯和并发访问量。")]),v._v(" "),s("li",[v._v("构建合理的负载模型，模拟不同场景下的用户负载，如高峰时段、日常使用等。")])])]),v._v(" "),s("li",[s("p",[v._v("选择测试工具和技术")]),v._v(" "),s("ul",[s("li",[v._v("根据测试需求和系统特点，选择适合的性能测试工具，如 JMeter、LR 等。")]),v._v(" "),s("li",[v._v("确定测试的技术手段，如压力测试、负载测试、稳定性测试等。")])])]),v._v(" "),s("li",[s("p",[v._v("设计测试场景")]),v._v(" "),s("ul",[s("li",[v._v("基于负载模型和业务流程，设计具体的测试场景，包括正常业务场景和异常业务场景。")]),v._v(" "),s("li",[v._v("例如登录、查询、下单等常见操作的并发测试场景。")])])]),v._v(" "),s("li",[s("p",[v._v("规划测试数据")]),v._v(" "),s("ul",[s("li",[v._v("准备足够的、真实的测试数据，包括基础数据和业务数据。")]),v._v(" "),s("li",[v._v("考虑数据的量级、分布和多样性，以模拟真实的业务环境。")])])]),v._v(" "),s("li",[s("p",[v._v("安排测试环境")]),v._v(" "),s("ul",[s("li",[v._v("搭建与生产环境相似的测试环境，包括服务器配置、网络环境等。")]),v._v(" "),s("li",[v._v("确保测试环境的稳定性和可重复性。")])])]),v._v(" "),s("li",[s("p",[v._v("制定测试执行计划")]),v._v(" "),s("ul",[s("li",[v._v("确定测试的执行顺序、轮次和时间安排。")]),v._v(" "),s("li",[v._v("规划每次测试的持续时间和间隔。")])])]),v._v(" "),s("li",[s("p",[v._v("定义性能指标和监控点")]),v._v(" "),s("ul",[s("li",[v._v("明确要监控的性能指标，如响应时间、吞吐量、CPU 利用率、内存使用等。")]),v._v(" "),s("li",[v._v("确定在测试过程中监控的关键节点和位置。")])])]),v._v(" "),s("li",[s("p",[v._v("制定风险应对策略")]),v._v(" "),s("ul",[s("li",[v._v("预测可能出现的风险，如测试环境故障、测试结果不符合预期等。")]),v._v(" "),s("li",[v._v("制定相应的应对措施和预案。")])])]),v._v(" "),s("li",[s("p",[v._v("设定资源需求")]),v._v(" "),s("ul",[s("li",[v._v("评估所需的人力、时间、硬件资源等。")]),v._v(" "),s("li",[v._v("确保资源的及时到位和合理分配。")])])]),v._v(" "),s("li",[s("p",[v._v("确定结果评估和报告方式")]),v._v(" "),s("ul",[s("li",[v._v("明确如何对测试结果进行分析和评估。")]),v._v(" "),s("li",[v._v("规划测试报告的内容和格式，包括问题总结、改进建议等。")])])]),v._v(" "),s("li",[s("p",[v._v("审批和沟通计划")]),v._v(" "),s("ul",[s("li",[v._v("将性能测试计划提交给相关利益者进行审批和确认。")]),v._v(" "),s("li",[v._v("与开发、运维等团队进行充分的沟通和协调，确保各方理解和支持计划。")])])])])])}),[],!1,null,null,null);_.default=t.exports}}]);