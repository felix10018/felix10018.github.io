(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{612:function(s,t,a){"use strict";a.r(t);var n=a(30),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("分治算法（Divide and Conquer Algorithm）是一种将复杂问题分解为相同类型的子问题，然后逐个解决子问题，并将子问题的解组合成原问题的解的算法策略。")]),s._v(" "),a("p",[s._v("分治算法一般分为三个步骤：")]),s._v(" "),a("ol",[a("li",[s._v("分解（Divide）：将问题分解为若干个规模较小、相互独立且与原问题形式相同的子问题。")]),s._v(" "),a("li",[s._v("解决（Conquer）：递归地求解各个子问题。")]),s._v(" "),a("li",[s._v("合并（Combine）：将子问题的解合并为原问题的解。")])]),s._v(" "),a("p",[s._v("以下是一个使用分治算法计算数组元素之和的 Python 示例代码：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("divide_and_conquer_sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elif")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n        left_sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" divide_and_conquer_sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        right_sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" divide_and_conquer_sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" left_sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" right_sum\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 测试示例")]),s._v("\narr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("divide_and_conquer_sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("在上述代码中，"),a("code",[s._v("divide_and_conquer_sum")]),s._v(" 函数实现了分治求数组元素之和的功能。如果数组长度为 0 则返回 0 ，长度为 1 则返回该元素。否则，将数组分为左右两部分，分别递归计算两部分的和，最后将两部分的和相加得到最终结果。")]),s._v(" "),a("h3",{attrs:{id:"如何快速理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何快速理解"}},[s._v("#")]),s._v(" 如何快速理解")]),s._v(" "),a("p",[s._v("分治算法中的递归思想可以从以下几个方面来理解：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("问题分解：递归的核心在于将一个大问题不断地分解为更小、更相似的子问题。在分治算法中，我们将原问题按照一定的规则分成多个规模较小但结构相同的子问题。这就像是把一个大任务拆分成一系列小任务，每个小任务都是大任务的一个缩影。")])]),s._v(" "),a("li",[a("p",[s._v("自我调用：递归函数会直接或间接地调用自身来解决子问题。这意味着函数在处理子问题时，使用的是与处理原问题相同的逻辑和方法。通过不断地自我调用，问题的规模逐渐减小，直到达到一个可以直接求解的基本情况。")])]),s._v(" "),a("li",[a("p",[s._v("基本情况：为了避免无限递归，必须定义一个或多个基本情况（也称为终止条件）。当问题规模减小到这些基本情况时，可以直接给出问题的解，而不再进行递归调用。例如，在计算数组和的分治算法中，当数组长度为 1 时，就是一个基本情况，可以直接返回数组中的唯一元素作为和。")])]),s._v(" "),a("li",[a("p",[s._v("合并结果：在分治算法中，解决了各个子问题后，还需要将子问题的解合并起来，得到原问题的解。递归调用在返回时，会逐步将子问题的解传递回上层调用，最终组合成原问题的完整解。")])]),s._v(" "),a("li",[a("p",[s._v("简洁与抽象：递归思想使得复杂问题的解决方式变得简洁和具有高度的抽象性。我们不需要关心具体的问题分解和组合的细节，只需要关注如何将问题划分为子问题以及如何合并子问题的解。")])])]),s._v(" "),a("p",[s._v("分治算法中的递归思想是一种强大的问题解决策略，它利用了函数自身的调用和问题的相似性来逐步简化问题，最终解决复杂的计算任务。")])])}),[],!1,null,null,null);t.default=r.exports}}]);